{"version":3,"sources":["reportWebVitals.ts","api/api.ts","app/state/users-reducer.ts","app/state/filtered-posts-reducer.ts","app/App.tsx","app/state/all-posts-reducer.ts","app/state/coments-reducer.ts","app/state/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","usersAPI","get","UserId","postId","changeUserStatusAC","id","isChecked","type","getFilteredPostsTC","dispatch","res","posts","data","catch","error","console","log","App","useDispatch","useEffect","message","localStorage","getItem","getFromLocal","users","some","u","setItem","JSON","stringify","clear","useSelector","state","allPosts","filteredPosts","comments","getPostsByUser","debounce","userId","showCommentsHandler","getCommentsTC","localUsersJSON","localUsers","parse","getLocalUsersAC","forEach","className","length","LinearProgress","color","map","post","title","style","background","body","onClick","c","onChange","e","newIsChecked","currentTarget","checked","name","rootReducer","combineReducers","action","filter","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.224ee6cf.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import axios from 'axios'\r\nimport {UsersType} from \"../app/state/users-reducer\";\r\nimport {PostsType} from \"../app/state/filtered-posts-reducer\";\r\nimport {CommentsType} from \"../app/state/coments-reducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://jsonplaceholder.typicode.com/',\r\n})\r\n\r\n// api\r\nexport const usersAPI = {\r\n    getAllPosts() {\r\n        return instance.get<PostsType>('posts')\r\n    },\r\n    getUsersForFilter() {\r\n        return instance.get<UsersType>('users')\r\n    },\r\n    getPostsByUser(UserId :number) {\r\n        return instance.get<PostsType>(`posts?userId=${UserId}`)\r\n    },\r\n    getComments(postId: number){\r\n        return instance.get<CommentsType>(`posts/${postId}/comments`)\r\n    },\r\n}\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../../api/api\";\r\nimport {AxiosError} from \"axios\";\r\n\r\ntype User = {\r\n    id: number\r\n    name: string\r\n    username: string\r\n    email: string\r\n    isChecked: boolean\r\n}\r\n\r\nexport type UsersType = Array<User>\r\nexport type getUsersACType = ReturnType<typeof getUsersAC> | ReturnType<typeof changeUserStatusAC> | ReturnType<typeof getLocalUsersAC>\r\ntype ActionsType = getUsersACType\r\n\r\nexport const usersReducer = (state: UsersType = [], action: ActionsType): UsersType => {\r\n    switch (action.type) {\r\n        case \"USERS/GET-USERS\":\r\n            return action.users.map(u => ({...u, isChecked: false}))\r\n        case \"USERS/CHANGE-USER-STATUS\":\r\n            return state.map(u => u.id === action.id ? {...u,  isChecked: action.isChecked} : u)\r\n        case \"USERS/GET-LOCAL-USERS\":\r\n            return [...action.users]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action Creator\r\n\r\nexport const getUsersAC = (users: UsersType) => ({type: 'USERS/GET-USERS', users}) as const\r\nexport const changeUserStatusAC = (id: number, isChecked: boolean) => ({type: 'USERS/CHANGE-USER-STATUS', id, isChecked}) as const\r\nexport const getLocalUsersAC = (users: UsersType) => ({type: 'USERS/GET-LOCAL-USERS', users}) as const\r\n//Thunk\r\n\r\nexport const getUsersTC = () => (dispatch: Dispatch) => {\r\n    usersAPI.getUsersForFilter()\r\n        .then((res)  => {\r\n            dispatch(getUsersAC(res.data))\r\n        })\r\n        .catch((error: AxiosError) => {\r\n                console.log(error.message)\r\n            }\r\n        )\r\n}","import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../../api/api\";\r\nimport {Post} from \"./all-posts-reducer\";\r\n\r\nexport type PostsType = Array<Post>\r\ntype ActionsType = ReturnType<typeof getFilteredPostsAC> | ReturnType<typeof removePostsAC>\r\n\r\nexport const filteredPostsReducer = (state: PostsType = [], action: ActionsType): PostsType => {\r\n    switch (action.type) {\r\n        case \"FILTERED-POSTS/GET-POSTS-BY-USER\":\r\n            return [...state, ...action.posts]\r\n        case \"FILTERED-POSTS/REMOVE-POSTS-BY-USER\":\r\n            return state.filter(post => post.userId !== action.userId)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC creator\r\n\r\nexport const getFilteredPostsAC = (posts: PostsType) => ({type: 'FILTERED-POSTS/GET-POSTS-BY-USER', posts}) as const\r\nexport const removePostsAC = (userId: number) => ({type: 'FILTERED-POSTS/REMOVE-POSTS-BY-USER', userId}) as const\r\n\r\n//Thunk\r\n\r\nexport const getFilteredPostsTC = (UserId :number ) => (dispatch: Dispatch) => {\r\n    usersAPI.getPostsByUser(UserId)\r\n        .then((res) => {\r\n            dispatch(getFilteredPostsAC(res.data))\r\n        })\r\n        .catch(error => {\r\n                console.log(error)\r\n            }\r\n        )\r\n}","import React, {ChangeEvent, useEffect} from 'react'\r\nimport './App.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\nimport {changeUserStatusAC, getLocalUsersAC, getUsersTC, UsersType} from \"./state/users-reducer\";\r\nimport {getAllPostsTC, PostsType} from \"./state/all-posts-reducer\";\r\nimport {getFilteredPostsTC, removePostsAC} from \"./state/filtered-posts-reducer\";\r\nimport {CommentsType, getCommentsTC} from \"./state/coments-reducer\";\r\nimport {debounce} from \"@mui/material\";\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(getAllPostsTC())\r\n\r\n        if (localStorage.getItem('localUsers')) {\r\n            getFromLocal()\r\n        } else {\r\n            dispatch(getUsersTC())\r\n        }\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n      users.some(u => u.isChecked) ? localStorage.setItem('localUsers', JSON.stringify(users)) : localStorage.clear()\r\n       })\r\n\r\n    const users = useSelector<AppRootStateType, UsersType>(state => state.users)\r\n    const allPosts = useSelector<AppRootStateType, PostsType>(state => state.allPosts)\r\n    const filteredPosts = useSelector<AppRootStateType, PostsType>(state => state.filteredPosts)\r\n    const comments = useSelector<AppRootStateType, CommentsType>(state => state.comments)\r\n\r\n    const getPostsByUser = debounce((id: number, isChecked: boolean) => {\r\n        if (!isChecked) {\r\n            dispatch(removePostsAC(id))\r\n            dispatch(changeUserStatusAC(id, isChecked))\r\n        } else {\r\n            dispatch(getFilteredPostsTC(id))\r\n            dispatch(changeUserStatusAC(id, isChecked))\r\n        }\r\n    }, 500)\r\n\r\n    const showCommentsHandler = debounce((postId: number) => {\r\n        dispatch(getCommentsTC(postId))\r\n    }, 500)\r\n\r\n    const getFromLocal = () => {\r\n        const localUsersJSON = localStorage.getItem('localUsers')\r\n        if (localUsersJSON) {\r\n            const localUsers: UsersType = JSON.parse(localUsersJSON)\r\n            dispatch(getLocalUsersAC(localUsers))\r\n            localUsers.forEach(u => u.isChecked && dispatch(getFilteredPostsTC(u.id)))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <div className={'mainBlock'}>\r\n\r\n                <div className={'postsBlock'}>\r\n                    {users.length === 0 && <LinearProgress color={'secondary'}/>}\r\n                    {\r\n                        users.some(u => u.isChecked)\r\n                            ?\r\n                            filteredPosts.map(post => {\r\n                                const onClickHandler = () => showCommentsHandler(post.id)\r\n\r\n                                return (\r\n                                    <div key={post.id}>\r\n                                        <li>{post.title}</li>\r\n                                        <div style={{background: 'lightblue'}}>\r\n                                            {post.body}\r\n                                        </div>\r\n                                        <button onClick={onClickHandler}>expand</button>\r\n                                        <div style={{background: 'lightgray'}}>\r\n                                            {comments.map(c => c.postId === post.id ?\r\n                                                <p key={c.id}> {c.id} {c.body}</p> : '')}\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                            :\r\n                            allPosts.map(post => {\r\n                                const onClickHandler = () => showCommentsHandler(post.id)\r\n\r\n                                return (\r\n                                    <div key={post.id}>\r\n                                        <li>{post.title}</li>\r\n                                        <div style={{background: 'lightblue'}}>\r\n                                            {post.body}\r\n                                        </div>\r\n                                        <button onClick={onClickHandler}>expand</button>\r\n                                        <div style={{background: 'lightgray'}}>\r\n                                            {comments.map(c => c.postId === post.id ?\r\n                                                <p key={c.id}> {c.id} {c.body}</p> : '')}\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                    }\r\n                </div>\r\n\r\n                <div className={'selectBlock'}>\r\n                    <div className={'selectTitle'}>Select users to view their posts</div>\r\n                    <div className={'selectBody'}>\r\n                        {users.length === 0 && <LinearProgress color={'secondary'}/>}\r\n                        {users.map(u => {\r\n                            const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                                let newIsChecked = e.currentTarget.checked\r\n                                getPostsByUser(u.id, newIsChecked)\r\n                            }\r\n\r\n                            return (\r\n                                <div key={u.id}>\r\n                                    <input type=\"checkbox\" onChange={onChangeHandler} checked={u.isChecked}/>\r\n                                    {u.name}\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../../api/api\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport type Post = {\r\n    userId: number\r\n    id: number\r\n    title: string\r\n    body: string\r\n    comments: string\r\n}\r\n\r\nexport type PostsType = Array<Post>\r\ntype ActionsType = ReturnType<typeof getAllPostsAC>\r\n\r\nexport const allPostsReducer = (state: PostsType = [], action: ActionsType): PostsType => {\r\n    switch (action.type) {\r\n        case \"ALL-POSTS/GET-POSTS\":\r\n            return [...action.posts]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC creator\r\n\r\nexport const getAllPostsAC = (posts: PostsType) => ({type: 'ALL-POSTS/GET-POSTS', posts}) as const\r\n\r\n//Thunk\r\n\r\nexport const getAllPostsTC = () => (dispatch: Dispatch) => {\r\n    usersAPI.getAllPosts()\r\n        .then((res) => {\r\n            dispatch(getAllPostsAC(res.data))\r\n        })\r\n        .catch((error: AxiosError)=> {\r\n                console.log(error.message)\r\n            }\r\n        )\r\n}","import {Dispatch} from \"redux\";\r\nimport {usersAPI} from \"../../api/api\";\r\n\r\nexport type Comment = {\r\n    postId: number\r\n    id: number\r\n    name: string\r\n    email: string\r\n    body: string\r\n}\r\n\r\nexport type CommentsType = Array<Comment>\r\ntype ActionsType = ReturnType<typeof getCommentsAC>\r\n\r\nexport const commentsReducer = (state: CommentsType = [], action: ActionsType): CommentsType => {\r\n    switch (action.type) {\r\n        case \"COMMENTS/GET-COMMENTS\" :\r\n            return [ ...action.comments]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC creator\r\n\r\nexport const getCommentsAC = (comments: CommentsType) => ({type: 'COMMENTS/GET-COMMENTS', comments}) as const\r\n\r\n//Thunk\r\n\r\nexport const getCommentsTC = (postId: number) => (dispatch: Dispatch) => {\r\n    usersAPI.getComments(postId)\r\n        .then((res) => {\r\n            dispatch(getCommentsAC(res.data))\r\n        })\r\n        .catch((error) => {\r\n                console.log(error)\r\n            }\r\n        )\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport {usersReducer} from \"./users-reducer\";\r\nimport {allPostsReducer} from \"./all-posts-reducer\";\r\nimport {filteredPostsReducer} from \"./filtered-posts-reducer\";\r\nimport {commentsReducer} from \"./coments-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    users: usersReducer,\r\n    allPosts: allPostsReducer,\r\n    filteredPosts: filteredPostsReducer,\r\n    comments: commentsReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}